import os
import re
import threading
import time
from datetime import datetime
from gc import callbacks
from plistlib import loads

from telebot import types
from telebot.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, InputMedia, \
    Update, LabeledPrice
from telegram._utils import markup

from bot_setting import bot
from database import postgres
from dotenv import load_dotenv





def basket_handler():
    # ‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì COMMANDS ------

    # ‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì REGEXP ------
    bot.register_message_handler(send_products_basket, regexp="üõí–ö–æ—Ä–∑–∏–Ω–∞")
    bot.register_message_handler(send_profile_info, regexp="üê∞–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç")

    # ‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì CALLBACKS ------
    bot.register_callback_query_handler(send_to_user_products, lambda x: x.data.startswith('send_users_product_all'))
    bot.register_callback_query_handler(send_list_delete_product_to_basket, lambda x: x.data.startswith('delete_product_to_basket'))
    bot.register_callback_query_handler(delete_product_to_basket, lambda x: x.data.startswith('prod_delete_'))
    bot.register_callback_query_handler(back_to_my_product_from_delete,lambda x: x.data.startswith('return_my_product'))
    bot.register_callback_query_handler(delete_all_product_from_basket,lambda x: x.data.startswith('delete_product_all'))
    bot.register_callback_query_handler(send_list_product_edit_to_basket,lambda x: x.data.startswith('edit_count_product_to_basket'))
    bot.register_callback_query_handler(edit_product_to_basket,lambda x: x.data.startswith('ed_product_count_'))
    bot.register_callback_query_handler(delete_message2,lambda x: x.data.startswith('delete_message_chat'))
    bot.register_callback_query_handler(send_message_change_name,lambda x: x.data.startswith('send_edit_message_name'))
    bot.register_callback_query_handler(send_edit_message_adress,lambda x: x.data.startswith('send_edit_message_adress'))
    bot.register_callback_query_handler(send_edit_message_phone_number,lambda x: x.data.startswith('send_edit_message_phone_number'))
    bot.register_callback_query_handler(send_profile_info,lambda x: x.data.startswith('return_profile_info'))
    bot.register_callback_query_handler(add_order_prepare,lambda x: x.data.startswith('order_add'))
    bot.register_callback_query_handler(confirm_order,lambda x: x.data.startswith('order_done_'))
    bot.register_callback_query_handler(handle_payment,lambda x: x.data.startswith('pay_order_'))



def delete_message2(call):
    bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)

def back_to_my_product_from_delete(call):
    send_to_user_products(call, edit=True)

def send_products_basket(message):
    caption = f"–≠—Ç–æ –≤–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ —Å —Ç–æ–≤–∞—Ä–∞–º. –í—ã –º–æ–∂–µ—Ç–µ –µ—ë —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å: –ª—é–±–æ–π —Ç–æ–≤–∞—Ä –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å, –ª–∏–±–æ –ø–æ–º–µ–Ω—è—Ç—å –µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ! –¢–∞–∫–∂–µ –∑–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É '–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑'"
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton(text="–ú–æ–∏ —Ç–æ–≤–∞—Ä—ã", callback_data='send_users_product_all'))
    bot.send_message(message.from_user.id, caption, reply_markup=markup, parse_mode='markdown')

def send_to_user_products(call, edit=True):
    fullprice = 0
    caption = ""
    user_id = call.from_user.id
    products_and_count = postgres.get_products_to_basket_user(user_id)
    if products_and_count:
        markup = InlineKeyboardMarkup()
        for item in products_and_count:
            count = item["count_product"]
            product_info, unit = postgres.get_product_full_info(item["products_id"])
            caption += f"–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: {product_info["name"]}  \n–¶–µ–Ω–∞ –∑–∞ {unit}. : {product_info["price"]}.00 —Ä—É–±.  \n–í—ã–±—Ä–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {count} {unit}. \n–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ —Ç–æ–≤–∞—Ä: {int(count)* int(product_info["price"])}.00 —Ä—É–±.\n\n\n\n"
            fullprice += int(count)* int(product_info["price"])
            markup.add(InlineKeyboardButton(text=f" {product_info["name"]}  {int(count)* int(product_info["price"])}.00 —Ä—É–±." , callback_data=f'product_{item["products_id"]}'))
        markup.add(InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä—ã", callback_data='delete_product_to_basket'),
                   InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ", callback_data='edit_count_product_to_basket'), )
        markup.add(InlineKeyboardButton(text="–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data='order_add'))
        bot.send_message(call.from_user.id, caption + f"–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å (–∑–∞ –≤—Å–µ —Ç–æ–≤–∞—Ä—ã):  {fullprice}.00 —Ä—É–±. \n\n–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ —É–∑–Ω–∞—Ç—å –æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞—Ö, –Ω–∞–∂–∞–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É!", reply_markup=markup, parse_mode='markdown')
    else:
        caption = "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!\n –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–¢–æ–≤–∞—Ä—ã', —á—Ç–æ–±—ã –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –∫–∞—Ç–∞–ª–æ–≥–æ–º!"
        bot.send_message(call.from_user.id, caption ,  parse_mode='markdown')


def send_list_delete_product_to_basket(call):
    markup = InlineKeyboardMarkup()
    user_id = call.from_user.id
    products_and_count = postgres.get_products_to_basket_user(user_id)
    for item in products_and_count:
        product_id = item["products_id"]
        count = item["count_product"]
        product_info, unit = postgres.get_product_full_info(product_id)
        print(f" item_id {item["products_id"]}")
        markup.add(
            InlineKeyboardButton(text=f" {product_info["name"]}  {int(count) * int(product_info["price"])}.00 —Ä—É–±.",
                                 callback_data=f'prod_delete_{item["products_id"]}'))
    markup.add(InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Ç–æ–≤–∞—Ä—ã", callback_data='delete_product_all'))
    markup.add(InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data='return_my_product'))
    bot.send_message(call.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:", reply_markup=markup, parse_mode='markdown')

def delete_product_to_basket(call):
    product_id = call.data[12:]
    print(f" item {product_id}")
    user_id = call.from_user.id
    result_message= postgres.delete_product_basket(user_id, int(product_id))
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ç–æ–≤–∞—Ä–∞–º", callback_data='return_my_product'))
    bot.send_message(call.from_user.id, result_message,  reply_markup=markup, parse_mode='markdown' )

def delete_all_product_from_basket(call):
    user_id = call.from_user.id
    result_message = postgres.delete_all_users_product_basket(user_id)
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ç–æ–≤–∞—Ä–∞–º", callback_data='return_my_product'))
    bot.send_message(call.from_user.id, result_message, reply_markup=markup, parse_mode='markdown')

def send_list_product_edit_to_basket(call):
    markup = InlineKeyboardMarkup()
    user_id = call.from_user.id
    products_and_count = postgres.get_products_to_basket_user(user_id)
    for item in products_and_count:
        product_id = item["products_id"]
        count = item["count_product"]
        product_info, unit = postgres.get_product_full_info(product_id)
        markup.add(
            InlineKeyboardButton(text=f" {product_info["name"]} –í—ã–±—Ä–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {int(count)}  {int(count) * int(product_info["price"])}.00 —Ä—É–±.",
                                 callback_data=f'ed_product_count_{item["products_id"]}'))
    markup.add(InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data='return_my_product'))
    bot.send_message(call.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:", reply_markup=markup,
                     parse_mode='markdown')

def edit_product_to_basket(call):
    product_id = call.data[17:]

    bot.send_message(call.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö (–º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç 1 –∫–≥):")
    bot.register_next_step_handler(call.message, save_new_count_product, product_id)

def save_new_count_product(message, product_id):
    product_info, unit = postgres.get_product_full_info(product_id)
    quantity = int(message.text)
    user_id = message.from_user.id
    if  quantity >= 1 and quantity<= int(product_info["count"]):
        result_message = postgres.edit_count_product(user_id, int(product_id), quantity)
        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ç–æ–≤–∞—Ä–∞–º", callback_data='return_my_product'))
        bot.send_message(message.from_user.id, result_message, reply_markup=markup, parse_mode='markdown')
    else:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ (–º–∏–Ω–∏–º—É–º 1 –∫–≥).")
        bot.register_next_step_handler(message, save_new_count_product)

def send_profile_info(message):
    user_id = message.from_user.id
    user_info = postgres.get_full_user_info(user_id)
    print(user_info )
    adress_user = '–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω'
    phone_number_user = '–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω'
    if user_info["adress"] is not None:
        adress_user = user_info["adress"]
    if user_info['phone_number'] is not None:
        phone_number_user = user_info['phone_number']
    caption = f"–≠—Ç–æ –≤–∞—à –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç. \n–ó–¥–µ—Å—å –ø–æ–∫–∞–∑–∞–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—Å, –∫–æ—Ç–æ—Ä—É—é –≤—ã –º–æ–∂–µ—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å!\n\n\n–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —Ç–∞–∫–∏–µ:\n\n"
    caption_info = f"–ò–º—è: <b>{user_info["name"]}</b> \n–ê–¥—Ä–µ—Å: <b>{adress_user}</b> \n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: <b>{phone_number_user}</b>\n"
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è", callback_data='send_edit_message_name'),
               InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –∞–¥—Ä–µ—Å", callback_data='send_edit_message_adress'))
    markup.add(InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã–µ –Ω–æ–º–µ—Ä", callback_data='send_edit_message_phone_number'))
    bot.send_message(message.from_user.id, caption + caption_info, reply_markup=markup, parse_mode='html')

def send_message_change_name(call):
    bot.send_message(call.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è:")
    bot.register_next_step_handler(call.message, save_edit_user_name)

def save_edit_user_name(message):
    user_id = message.from_user.id
    new_name_user = message.text
    result_message = postgres.edit_name_user(user_id, new_name_user)
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data='return_profile_info'))
    bot.send_message(message.from_user.id, result_message, reply_markup=markup, parse_mode='markdown')

def send_edit_message_adress(call):
    bot.send_message(call.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å:")
    bot.register_next_step_handler(call.message, send_message_change_adress)

def send_message_change_adress(message):
    user_id = message.from_user.id
    new_name_adress = message.text
    result_message = postgres.edit_adress_user(user_id, new_name_adress)
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data='return_profile_info'))
    bot.send_message(message.from_user.id, result_message, reply_markup=markup, parse_mode='markdown')


def send_edit_message_phone_number(call):
    bot.send_message(call.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    bot.register_next_step_handler(call.message, send_message_change_phone_number)


def send_message_change_phone_number(message):
    user_id = message.from_user.id
    new_phone_number = message.text.strip()

    phone_pattern = re.compile(r'^(?:\+7|8)(?:\s|\(?)(\d{3})(?:\)?(\s|-)?)(\d{3})(?:\2)(\d{2})(?:\2)(\d{2})$|^(?:\+7|8)\d{10}$')
    markup = InlineKeyboardMarkup()
    if phone_pattern.match(new_phone_number):
        result_message = postgres.edit_phone_number(user_id, new_phone_number)
        markup.add(InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data='return_profile_info'))
        bot.send_message(message.from_user.id, result_message, reply_markup=markup, parse_mode='markdown')
    else:
        markup.add(InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data='return_profile_info'))
        bot.send_message(message.from_user.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n"
                                                 "–§–æ—Ä–º–∞—Ç: +7 (999) 999-99-99, +79999999999 –∏–ª–∏ 89999999999.", reply_markup=markup)



def add_order_prepare(call):
    user_id = call.from_user.id
    user_info = postgres.get_full_user_info(user_id)


    missing_info = []
    if user_info["adress"] is None:
        missing_info.append("–∞–¥—Ä–µ—Å")
    if user_info["phone_number"] is None:
        missing_info.append("–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")


    if missing_info:
        missing_info_str = ", ".join(missing_info)
        bot.send_message(user_id, f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ {missing_info_str}.")
        bot.register_next_step_handler(call.message, update_user_info, missing_info)
    else:

        show_user_and_cart_info(call)


def update_user_info(message, missing_info):
    user_id = message.from_user.id

    if "–∞–¥—Ä–µ—Å" in missing_info and message.text:
        postgres.edit_adress_user(user_id, message.text)
        bot.send_message(user_id, "–ê–¥—Ä–µ—Å –æ–±–Ω–æ–≤–ª—ë–Ω.")
        missing_info.remove("–∞–¥—Ä–µ—Å")
    elif "–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞" in missing_info and message.text:
        postgres.edit_phone_number(user_id, message.text)
        bot.send_message(user_id, "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –æ–±–Ω–æ–≤–ª—ë–Ω.")
        missing_info.remove("–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")


    if missing_info:
        if "–∞–¥—Ä–µ—Å" in missing_info:
            bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å.")
            bot.register_next_step_handler(message, update_user_info, missing_info)
        elif "–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞" in missing_info:
            bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")
            bot.register_next_step_handler(message, update_user_info, missing_info)
    else:
        show_user_and_cart_info(message)


def show_user_and_cart_info(message):
    fullprice = 0
    caption = ""
    user_id = message.from_user.id
    basket_id = postgres.get_basket_id_by_user_id(user_id)
    user_info = postgres.get_full_user_info(user_id)
    products_and_count = postgres.get_products_to_basket_user(user_id)
    markup = InlineKeyboardMarkup()
    if products_and_count:
        caption_user = ""
        for item in products_and_count:
            count = item["count_product"]
            product_info, unit = postgres.get_product_full_info(item["products_id"])
            caption += f"–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: {product_info["name"]}  \n–¶–µ–Ω–∞ –∑–∞ {unit}. : {product_info["price"]}.00 —Ä—É–±.  \n–í—ã–±—Ä–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {count} {unit}. \n–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ —Ç–æ–≤–∞—Ä: {int(count) * int(product_info["price"])}.00 —Ä—É–±.\n\n\n\n"
            fullprice += int(count) * int(product_info["price"])
        caption_user = f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:\n\n–ò–º—è: <b>{user_info["name"]}</b> \n–ê–¥—Ä–µ—Å: <b>{user_info["adress"]}</b> \n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: <b>{user_info["phone_number"]}</b>\n\n\n"
        markup.add(InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"order_done_{fullprice}_{basket_id}"))
        markup.add(InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ", callback_data='return_my_product'))
        bot.send_message(message.from_user.id,
                         caption_user + caption + f"–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å (–∑–∞ –≤—Å–µ —Ç–æ–≤–∞—Ä—ã):  <b>{fullprice}.00 —Ä—É–±.</b> \n\n",
                         reply_markup=markup, parse_mode='html')


def confirm_order(call):
    user_id = call.from_user.id
    date_order = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    parts = call.data.split("_")
    fullprice = parts[2]
    basket_id = parts[3]
    status = "–°–æ–∑–¥–∞–Ω"

    order_id, message = postgres.create_order_for_user(user_id, basket_id, date_order, fullprice, status)
    print(order_id, "  ", message)

    if message == "–ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω!":
        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∏—Ç—å –∑–∞–∫–∞–∑", callback_data=f'pay_order_{order_id}_{fullprice}'))
        bot.send_message(user_id, "–ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω! –û–ø–ª–∞—Ç–∏—Ç–µ –µ–≥–æ, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É:", reply_markup=markup)

        threading.Thread(target=check_order_status, args=(order_id, user_id), daemon=True).start()
    else:
        bot.send_message(user_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

def check_order_status(order_id, user_id):
    while True:
        order_info = postgres.get_order_status(order_id)
        if order_info and order_info == '–û–ø–ª–∞—á–µ–Ω':
            bot.send_message(user_id, "–í–∞—à –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω! –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!üçñ‚ù§Ô∏èüçñ")
            break
        time.sleep(10)


def handle_payment(call):
    load_dotenv()
    TOKEN_TEST =  os.getenv('TOKEN_YOOKASSA_TEST')
    parts = call.data.split("_")
    order_id = parts[2]
    fullprice = float(parts[3])
    user_id = call.from_user.id
    chat_id = call.message.chat.id

    title = f"–ó–∞–∫–∞–∑ #{order_id}"
    description = "–¢–æ–≤–∞—Ä—ã –º—è—Å–Ω–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞ ü•©–ú—è—Å–æ–í–∫—É—Å. –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∞–ø–ø–µ—Ç–∏—Ç–∞!"
    invoice_payload = f"order_{order_id}"
    currency = "RUB"
    prices = [LabeledPrice("–ó–∞–∫–∞–∑", int(1000 * 100))]  # –¶–µ–Ω–∞ –≤ –∫–æ–ø–µ–π–∫–∞—Ö

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—á–µ—Ç–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É
    bot.send_invoice(
        chat_id=chat_id,
        title=title,
        description=description,
        invoice_payload=invoice_payload,
        provider_token=TOKEN_TEST,
        prices=prices,
        currency=currency,
        is_flexible=False
    )

    bot.answer_callback_query(call.id, "–°—á–µ—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")

@bot.pre_checkout_query_handler(func=lambda query: True)
def pre_checkout_query_handler(pre_checkout_query):
    bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)

@bot.message_handler(content_types=['successful_payment'])
def successful_payment_handler(message):
    order_id = message.successful_payment.invoice_payload.split("_")[1]
    res= postgres.update_order_status(order_id, '–û–ø–ª–∞—á–µ–Ω')
    print(res)







