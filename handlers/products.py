from telebot import types
from telebot.states.sync import context
from telebot.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, InputMedia, \
    Update
from bot_setting import bot
from database import postgres



def products_handler():
    # ‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì COMMANDS ------

    # ‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì REGEXP ------
    bot.register_message_handler(send_products_to_user_message, regexp="ü•©–¢–æ–≤–∞—Ä—ã")
    bot.register_message_handler(send_support_message, regexp="‚úâÔ∏è–ü–æ–¥–¥–µ—Ä–∂–∫–∞")
    # ‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì CALLBACKS ------
    bot.register_callback_query_handler(delete_message, lambda x: x.data.startswith('delete_message'))
    bot.register_callback_query_handler(send_products_by_types, lambda x: x.data.startswith('types_'))
    bot.register_callback_query_handler(send_products_by_types_from_category, lambda x: x.data.startswith('category_'))
    bot.register_callback_query_handler(send_products_to_user_message_edit, lambda x: x.data.startswith('back_to_category'))
    bot.register_callback_query_handler(send_products_to_user_message_edit1,lambda x: x.data.startswith('back_to_types'))
    bot.register_callback_query_handler(send_products_full_info, lambda x: x.data.startswith('product_'))
    bot.register_callback_query_handler(add_to_basket_callback, lambda x: x.data.startswith('add_to_basket_'))
    bot.register_callback_query_handler(confirm_add_to_basket, lambda x: x.data.startswith('confirm_add_'))





def send_products_to_user_message_edit(call):
    send_products_to_user_message(call, edit=True)


def send_products_to_user_message_edit1(call):
    send_products_by_types_from_category(call, edit=True)



def send_products_to_user_message(message, edit=False):

    categories = postgres.get_products_category()
    markup = InlineKeyboardMarkup()
    for category in categories:
        markup.add(InlineKeyboardButton(text=category["name"], callback_data=f'category_{category["name"]}'))
    markup.add(InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data='delete_message'))
    if not edit:
        try:
            with open(f'image/forAll/market1.jpg', 'rb') as img:
                bot.send_photo(message.from_user.id, img, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤:",parse_mode='html',  reply_markup=markup)
        except Exception as e:
            print(str(e))
    else:
        bot.edit_message_reply_markup(chat_id=message.message.chat.id, message_id=message.message.message_id,
                                      reply_markup=markup)




def send_products_by_types_from_category(call, edit=False):

    category = call.data[9:]
    products = postgres.get_products_type(category)
    category_current = postgres.get_products_category_by_name(category)
    types_name = set([item[0] for item in products])
    print(category_current)
    img_category = category_current[0]["img"]


    markup = InlineKeyboardMarkup()
    for types in types_name:
        markup.add(InlineKeyboardButton(text=f"{types}", callback_data=f'types_{types}'))
    markup.add(InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data='back_to_category'))

    if not edit:
        try:
            with open(f'image/category/{img_category}', 'rb') as img:
                bot.send_photo(call.from_user.id, img, f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è:<b>  {category_current[0]['name']}</b> \n\n<u><i>{category_current[0]['description']}</i></u> \n \n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç–æ–≤–∞—Ä–∞:", parse_mode='html',  reply_markup=markup)
        except Exception as e:
            print(str(e))
    else:
        bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                      reply_markup=markup)




def send_products_by_types(call):

    type = call.data[6:]
    products = postgres.get_products_info_by_types(type)
    markup = InlineKeyboardMarkup()
    for item in products:
        print(item)
        markup.add(InlineKeyboardButton(text=f"–ù–∞–∑–≤–∞–Ω–∏–µ: {item['name']}  –¶–µ–Ω–∞: {item['price']}.00 —Ä—É–±/{item['unit']}",  callback_data=f"product_{item['id']}"))
    markup.add(InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_types"))
    bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                  reply_markup=markup)




def send_products_full_info(call):

    product_id = call.data[8:]
    product_info, unit_product = postgres.get_product_full_info(int(product_id))
    description = f"–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: <b>{product_info['name']}</b>\n\n\n–¶–µ–Ω–∞: <u>{product_info['price']}.00 —Ä—É–±/{unit_product}</u>\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –≤ –Ω–∞–ª–∏—á–∏–∏: {product_info['count']}\n–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: <i>{product_info['description']}</i> "
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É", callback_data=f"add_to_basket_{product_id}"))
    markup.add(InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_product"))
    if product_info is None:
        description = "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"
    try:
        #with open(f'image/{product_info["img"]}.jpg', 'rb') as img:
        with open(f'image/product/1_1.jpg', 'rb') as img:
            media = InputMedia(type='photo', media=img)
            bot.edit_message_media(chat_id=call.message.chat.id, message_id=call.message.message_id, media=media)
            bot.edit_message_caption(chat_id=call.message.chat.id, parse_mode='html',  message_id=call.message.message_id,
                                     caption=description)
            bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                          reply_markup=markup)

    except Exception as e:
        bot.edit_message_caption(chat_id=call.message.chat.id, message_id=call.message.message_id, caption=description)
        bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                      reply_markup=markup)



user_states = {}
user_products = {}

def add_to_basket_callback(call):

    product_id = call.data[14:]
    user_states[call.from_user.id] = 'ask_quantity'
    user_products[call.from_user.id] = product_id

    bot.answer_callback_query(call.id)
    bot.send_message(call.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å (–º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: 1 –∫–≥):")
    bot.register_next_step_handler(call.message, ask_quantity)


def ask_quantity(message):

    product_id = user_products.get(message.from_user.id)
    product_info, unit_product = postgres.get_product_full_info(product_id)
    quantity = message.text

    if quantity.isdigit() and int(quantity) >= 1 and int(quantity)<= product_info["count"]:
        quantity = int(quantity)
        total_price = product_info['price'] * quantity
        confirmation_text = f"–í—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å {quantity} –∫–≥. —Ç–æ–≤–∞—Ä–∞ - {product_info['name']}  –Ω–∞ —Å—É–º–º—É {total_price}.00 —Ä—É–±. –≤ –∫–æ—Ä–∑–∏–Ω—É?\n\n"
        confirmation_markup = types.InlineKeyboardMarkup()
        confirmation_markup.add(
            types.InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_add_{product_id}_{quantity}"))
        confirmation_markup.add(
            types.InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel_add"))

        bot.send_message(message.chat.id, confirmation_text, reply_markup=confirmation_markup)
        user_states[message.from_user.id] = 'confirmation'


    else:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ (–º–∏–Ω–∏–º—É–º 1 –∫–≥).")
        bot.register_next_step_handler(message, ask_quantity)



def confirm_add_to_basket(call):

    parts = call.data.split('_')
    product_id = parts[2]
    quantity = parts[3]
    quantity = int(quantity)
    user_id = call.from_user.id
    print(user_id)

    postgres.add_product_to_basket(user_id, product_id, quantity)
    bot.send_message(call.message.chat.id, "–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!")



def cancel_add(call):
    global last_message_id
    bot.answer_callback_query(call.id)
    bot.edit_message_text(chat_id=call.message.chat.id,
                          message_id=call.message.message_id,
                          text="–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")




def delete_message(call):
    bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)


def send_support_message(message):
    link = '[–ù–∞–ø–∏—Å–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—É]()'
    bot.send_message(message.from_user.id, link, parse_mode='markdown')